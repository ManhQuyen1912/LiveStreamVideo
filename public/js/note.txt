document.getElementById('captureButton').addEventListener('click', () => {
        cameraOptions.forEach(cameraId => {
            const canvas = document.getElementById(`canvas-${cameraId}`);
            if (canvas) {
                const ctx = canvas.getContext('2d');
                if (ctx) {
                    // Ensure the canvas has content
                    ctx.fillStyle = 'red';
                    ctx.fillRect(10, 10, 50, 50); // Example content

                    const imageData = canvas.toDataURL('image/jpeg');
                    const modal = document.getElementById('imageModal');
                    const modalImg = document.getElementById('capturedImage');
                    const span = document.getElementsByClassName('close')[0];

                    modalImg.src = imageData;
                    modal.style.display = 'block';

                    span.onclick = function() {
                        modal.style.display = 'none';
                    }

                    window.onclick = function(event) {
                        if (event.target == modal) {
                            modal.style.display = 'none';
                        }
                    }
                } else {
                    console.error('Canvas context is not available.');
                }
            } else {
                console.error('Canvas element is not found.');
            }
        });
    });



    // // document.addEventListener('DOMContentLoaded', () => {
// //     const wsConnections = {};
// //     const captureInterval = 5000;

// //     // Khởi tạo kết nối WebSocket cho tất cả các camera
// //     const cameraOptions = Array.from(document.querySelectorAll('.grid-item canvas')).map(canvas => canvas.id.split('-')[1]);

// //     cameraOptions.forEach(cameraId => {
// //         const wsUrl = 'ws://' + location.host + '/api/stream/' + encodeURIComponent(cameraId);
// //         const wsConnection = new WebSocket(wsUrl);

// //         wsConnection.onmessage = (event) => {
// //             console.log(`Data received from camera ${cameraId}`);
// //             // Optional: Draw a sample frame to canvas to verify data processing
// //         };

// //         wsConnection.onopen = () => {
// //             console.log(`WebSocket connection opened for camera ${cameraId}`);
// //         };

// //         wsConnection.onerror = () => {
// //             console.error(`Cannot connect to camera ${cameraId}.`);
// //         };

// //         wsConnection.onclose = () => {
// //             console.log(`WebSocket connection closed for camera ${cameraId}.`);
// //         };

// //         wsConnections[cameraId] = wsConnection;
// //     });

// //     document.getElementById('startButton').addEventListener('click', () => {
// //         cameraOptions.forEach(cameraId => {
// //             const wsConnection = wsConnections[cameraId];
// //             const canvas = document.getElementById(`canvas-${cameraId}`);

// //             if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {
// //                 loadPlayer({
// //                     url: wsConnection.url,
// //                     canvas: canvas
// //                 });
// //                 setInterval(() => {
// //                     captureImageAndSend(canvas,cameraId);
// //                 },captureInterval);
// //             } else {
// //                 console.error(`WebSocket connection for camera ${cameraId} is not open.`);
// //             }
// //         });
// //     });
// //     function captureImageAndSend(canvas, cameraId) {
// //         const imageData = canvas.toDataURL('image/jpeg').replace('data:image/png;base64,', '');
    
// //         fetch('/api/send-image', {
// //             method: 'POST',
// //             headers: {
// //                 'Content-Type': 'application/json'
// //             },
// //             body: JSON.stringify({
// //                 cameraId: cameraId,
// //                 image_base64: imageData
// //             })
// //         })
// //         .then(response => response.json())
// //         .then(data => {
// //             console.log(`Image from camera ${cameraId} sent successfully.`, data);
// //         })
// //         .catch(error => {
// //             console.error(`Failed to send image from camera ${cameraId}.`, error);
// //         });
// //     }
// // });


// document.addEventListener('DOMContentLoaded', () => {
//     const wsConnections = {};
//     const captureInterval = 5000;

//     // Load the COCO-SSD model
//     let modelPromise = cocoSsd.load().then(model => {
//         console.log('Model loaded successfully');
//         return model;
//     }).catch(error => {
//         console.error('Error loading model:', error);
//     });

//     // Initialize WebSocket connections for all cameras
//     const cameraOptions = Array.from(document.querySelectorAll('.grid-item canvas')).map(canvas => canvas.id.split('-')[1]);

//     cameraOptions.forEach(cameraId => {
//         const wsUrl = 'ws://' + location.host + '/api/stream/' + encodeURIComponent(cameraId);
//         const wsConnection = new WebSocket(wsUrl);

//         wsConnection.onmessage = (event) => {
//             console.log(`Data received from camera ${cameraId}`);
//             // Optional: Draw a sample frame to canvas to verify data processing
//         };

//         wsConnection.onopen = () => {
//             console.log(`WebSocket connection opened for camera ${cameraId}`);
//         };

//         wsConnection.onerror = () => {
//             console.error(`Cannot connect to camera ${cameraId}.`);
//         };

//         wsConnection.onclose = () => {
//             console.log(`WebSocket connection closed for camera ${cameraId}.`);
//         };

//         wsConnections[cameraId] = wsConnection;
//     });

//     document.getElementById('startButton').addEventListener('click', () => {
//         cameraOptions.forEach(cameraId => {
//             const wsConnection = wsConnections[cameraId];
//             const canvas = document.getElementById(`canvas-${cameraId}`);

//             if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {
//                 loadPlayer({
//                     url: wsConnection.url,
//                     canvas: canvas
//                 });
//                 setInterval(() => {
//                     captureAndDetect(canvas, cameraId);
//                 }, captureInterval);
//             } else {
//                 console.error(`WebSocket connection for camera ${cameraId} is not open.`);
//             }
//         });
//     });

//     // Capture a pic from vid canvas
//     // document.getElementById('captureButton').addEventListener('click', () => {

//     // Add an event listener for the capture button to manually capture an image from the canvas
//     document.getElementById('captureButton').addEventListener('click', () => {
//         cameraOptions.forEach(cameraId => {
//             const canvas = document.getElementById(`canvas-${cameraId}`);
//             if (canvas) {
//                 // Capture the current frame from the canvas
//                 const imageData = canvas.toDataURL('image/jpeg');

//                 // Display the image in a modal or log it
//                 showImageInModal(imageData, cameraId);
//             } else {
//                 console.error(`Canvas for camera ${cameraId} not found.`);
//             }
//         });
//     });

//     // Function to display the captured image in a modal
//     function showImageInModal(imageData, cameraId) {
//         // Create or select the modal element
//         let modal = document.getElementById('imageModal');
//         if (!modal) {
//             modal = document.createElement('div');
//             modal.id = 'imageModal';
//             modal.style.position = 'fixed';
//             modal.style.top = '50%';
//             modal.style.left = '50%';
//             modal.style.transform = 'translate(-50%, -50%)';
//             modal.style.backgroundColor = '#fff';
//             modal.style.padding = '20px';
//             modal.style.border = '1px solid #ccc';
//             modal.style.zIndex = 1000;

//             // Add a close button
//             // const closeButton = document.createElement('button');
//             // closeButton.innerText = 'Close';
//             // closeButton.onclick = () => {
//             //     modal.style.display = 'none';
//             // };
//             // modal.appendChild(closeButton);

//             document.body.appendChild(modal);
//         } else {
//             modal.style.display = 'block';
//         }

//         // Set the captured image in the modal
//         const imageElement = new Image();
//         imageElement.src = imageData;
//         imageElement.alt = `Captured Image from Camera ${cameraId}`;
//         imageElement.style.maxWidth = '100%';
//         imageElement.style.maxHeight = '400px';

//         // Clear existing content and add the new image to the modal
//         modal.innerHTML = '';  // Clear any previous content
//         // modal.appendChild(closeButton);  // Add the close button again
//         modal.appendChild(imageElement);
//     }


//     function resizeCanvas(canvas, maxWidth, maxHeight) {
//         const width = canvas.width;
//         const height = canvas.height;

//         if (width > maxWidth || height > maxHeight) {
//             const ratio = Math.min(maxWidth / width, maxHeight / height);
//             const newWidth = width * ratio;
//             const newHeight = height * ratio;

//             const tempCanvas = document.createElement('canvas');
//             tempCanvas.width = newWidth;
//             tempCanvas.height = newHeight;
//             const ctx = tempCanvas.getContext('2d');
//             ctx.drawImage(canvas, 0, 0, newWidth, newHeight);

//             return tempCanvas;
//         }
//         return canvas;
//     }

//     async function captureAndDetect(canvas, cameraId) {
//         const model = await modelPromise;
//         if (!model) {
//             console.error('Model not loaded');
//             return;
//         }
//         const resizedCanvas = resizeCanvas(canvas, 640, 480); // Adjust the size as needed
//         const imageData = resizedCanvas.toDataURL('image/jpeg', 0.5).replace('data:image/jpeg;base64,', '');
//         const img = new Image();
//         img.src = `data:image/jpeg;base64,${imageData}`;

//         img.onload = async () => {
//             const predictions = await model.detect(img);
//             console.log(`Predictions for camera ${cameraId}:`, predictions);
//             const personDetected = predictions.some(prediction => prediction.class === 'person');

//             // captureImageAndSend(canvas, cameraId);
//         };
//     }

//     // function captureImageAndSend(canvas, cameraId) {
//     //     const imageData = canvas.toDataURL('image/jpeg').replace('data:image/jpeg;base64,', '');

//     //     fetch('/api/send-image', {
//     //         method: 'POST',
//     //         headers: {
//     //             'Content-Type': 'application/json'
//     //         },
//     //         body: JSON.stringify({
//     //             cameraId: cameraId,
//     //             image_base64: imageData
//     //         })
//     //     })
//     //     .then(response => {
//     //         if (!response.ok) {
//     //             throw new Error(`HTTP error! status: ${response.status}`);
//     //         }
//     //         return response.json();
//     //     })
//     //     .then(data => {
//     //         console.log(`Image from camera ${cameraId} sent successfully.`, data);
//     //     })
//     //     .catch(error => {
//     //         console.error(`Failed to send image from camera ${cameraId}.`, error);
//     //     });
//     // }
// });


// document.addEventListener('DOMContentLoaded', () => {
    document.addEventListener('DOMContentLoaded', () => {
        const wsConnections = {};
        const captureInterval = 5000;
        let modelPromise = cocoSsd.load().then(model => {
            console.log('Model loaded successfully');
            return model;
        }).catch(error => {
            console.error('Error loading model:', error);
        });
    
        const cameraOptions = Array.from(document.querySelectorAll('.grid-item canvas')).map(canvas => canvas.id.split('-')[1]);
    
        cameraOptions.forEach(cameraId => {
            const wsUrl = 'ws://' + location.host + '/api/stream/' + encodeURIComponent(cameraId);
            const wsConnection = new WebSocket(wsUrl);
    
            wsConnection.onmessage = (event) => {
                console.log(`Data received from camera ${cameraId}`);
            };
    
            wsConnection.onopen = () => {
                console.log(`WebSocket connection opened for camera ${cameraId}`);
            };
    
            wsConnection.onerror = () => {
                console.error(`Cannot connect to camera ${cameraId}.`);
            };
    
            wsConnection.onclose = () => {
                console.log(`WebSocket connection closed for camera ${cameraId}.`);
            };
    
            wsConnections[cameraId] = wsConnection;
        });
    
        document.getElementById('startButton').addEventListener('click', () => {
            cameraOptions.forEach(cameraId => {
                const wsConnection = wsConnections[cameraId];
                const canvas = document.getElementById(`canvas-${cameraId}`);
    
                if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {
                    loadPlayer({
                        url: wsConnection.url,
                        canvas: canvas
                    });
                    setInterval(() => {
                        captureAndDetect(canvas, cameraId);
                    }, captureInterval);
                } else {
                    console.error(`WebSocket connection for camera ${cameraId} is not open.`);
                }
            });
        });
    
        document.getElementById('captureButton').addEventListener('click', () => {
            const canvas = document.getElementById(`canvas-DEV`);  // Update <cameraId> as needed
            const imageData = canvas.toDataURL('image/jpeg');
            // showImageInModal(imageData);
            console.log(imageData)
        });
    
        function showImageInModal(imageData) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            modalImg.src = imageData;
            modal.style.display = 'block';
        }
    
        document.getElementById('modalClose').addEventListener('click', () => {
            document.getElementById('imageModal').style.display = 'none';
        });
    
        async function captureAndDetect(canvas, cameraId) {
            const model = await modelPromise;
            if (!model) {
                console.error('Model not loaded');
                return;
            }
            const resizedCanvas = resizeCanvas(canvas, 640, 480);
            const imageData = resizedCanvas.toDataURL('image/jpeg', 0.5).replace('data:image/jpeg;base64,', '');
            const img = new Image();
            img.src = `data:image/jpeg;base64,${imageData}`;
    
            img.onload = async () => {
                const predictions = await model.detect(img);
                console.log(`Predictions for camera ${cameraId}:`, predictions);
                const personDetected = predictions.some(prediction => prediction.class === 'person');
    
                if (personDetected) {
                    captureImageAndSend(canvas, cameraId);
                }
            };
        }
    
        function resizeCanvas(canvas, maxWidth, maxHeight) {
            const width = canvas.width;
            const height = canvas.height;
            if (width > maxWidth || height > maxHeight) {
                const ratio = Math.min(maxWidth / width, maxHeight / height);
                const newWidth = width * ratio;
                const newHeight = height * ratio;
                const tempCanvas = document.createElement('canvas');
                tempCanvas.width = newWidth;
                tempCanvas.height = newHeight;
                const ctx = tempCanvas.getContext('2d');
                ctx.drawImage(canvas, 0, 0, newWidth, newHeight);
                return tempCanvas;
            }
            return canvas;
        }
    
        function captureImageAndSend(canvas, cameraId) {
            const imageData = canvas.toDataURL('image/jpeg').replace('data:image/jpeg;base64,', '');
    
            fetch('/api/send-image', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cameraId: cameraId,
                    image_base64: imageData
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log(`Image from camera ${cameraId} sent successfully.`, data);
            })
            .catch(error => {
                console.error(`Failed to send image from camera ${cameraId}.`, error);
            });
        }
    });
    